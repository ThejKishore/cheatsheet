plugins {
	alias(libs.plugins.ktJvm)
	alias(libs.plugins.ktSpring)
	alias(libs.plugins.spring)
	alias(libs.plugins.springManagement)
//	alias(libs.plugins.dockerPlugin)
	alias(libs.plugins.jkubePlugin)
}



//apply from: "gradle/docker.gradle"


group = "com.tk.learn"
version = "0.0.1-SNAPSHOT"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

var springCloudAzureVersion = "5.16.0"

dependencies {
	implementation(enforcedPlatform("com.azure.spring:spring-cloud-azure-dependencies:${springCloudAzureVersion}"))
	implementation(libs.azkeyVault)
//	implementation(libs.azAppConfig)
	implementation(libs.ktReflect)
	testImplementation(libs.bootTest)
	testImplementation(libs.ktJunit5)
	testImplementation(libs.junitPlatform)
}


kotlin {
	compilerOptions {
		freeCompilerArgs.add("-Xjsr305=strict")
	}
}


tasks {
	test {
		testLogging.showExceptions = true
		useJUnitPlatform()
	}
}

//docker {
//	springBootApplication {
//		baseImage = "eclipse-temurin:21"
//		images = ["${project.name}:0.0.1" , "${project.name}:latest" ]
//		jvmArgs = ["-Xmx2048m"]
//	}
//}

//apply from: "gradle/k8s.gradle"

task copyDependencies(type: Copy) {
	from configurations.runtimeClasspath
	into file("build/dependencies")
}


build.dependsOn(copyDependencies)

k8sBuild.dependsOn(build)

kubernetes {
	image {
		name = "${project.name}:${project.version}"
		alias = "camel-service"
		build {
			from = "eclipse-temurin:21-jre"
			assembly {
				targetDir = "/app"
				layers = [{
							  fileSets = [{
											  directory = file("${project.rootDir}/build/dependencies")
											  outputDirectory = "libs"
										  }, {
											  directory = file("${project.rootDir}/build/classes")
											  outputDirectory = "classes"
										  }, {
											  directory = file("${project.rootDir}/build/resources/main")
											  outputDirectory = "resources"
										  }]
						  }]
			}
			env {
				KEY_VAULT_URL = "https://thej-eastus-learn.vault.azure.net"
			}
			labels {
				labelWithValue = "foo"
				version = "${project.version}"
				artifactId = "${project.name}"
			}
			ports = ["8080"]
			entryPoint {
				exec = ["java", "-Xmx2048m", "-cp", "/app/resources:/app/classes/java/main:/app/classes/kotlin/main:/app/libs/*", "com.tk.learn.azkeyvault.AzKeyvaultApplicationKt"]
			}
		}
	}

	resources {
		labels {
			all {
				extraLabel = "quickstart-groovy-dsl-configuration"
			}
		}
		controllerName = "${project.name}-controller"
		replicas = "2"
		volumes = [
				{
					name = "scratch"
					type = "emptyDir"
					medium = "Memory"
					mounts = ["/var/scratch"]
				},
				{
					name = "downward-api-volume"
					type = "downwardAPI"
					items = [{
								 path = "labels"
								 fieldRef {
									 fieldPath = "metadata.labels"
								 }
							 },
							 {
								 path = "annotations"
								 fieldRef {
									 fieldPath = "metadata.annotations"
								 }
							 }]
				},
				{
					name = "config-vol"
					type = "configMap"
					configMapName = "log-config"
					configMapItems = [{
										  key = "log_level"
										  path = "log_level"
									  }]
				}
		]

		services = [{
						name = "${project.name}-service-one"
						headless = "false"
						type = "NodePort"
						ports = [{
									 protocol = "tcp"
									 port = "8787"
									 targetPort = "8787"
								 }]
					}]



		configMap {
			name = "log-config"
			entries = [{
						   name = "log_level"
						   value = "INFO"
					   }]
		}
	}
}