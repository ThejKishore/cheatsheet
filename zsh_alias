alias gs="git status"
alias gb="git branch"
alias gpl="git pull"
alias gps="git push"
alias gc="git commit -m"
alias gclone="git clone "
alias gconf='git config --list'
alias ga="git add "
alias gaa="git add ."
alias gst="git stash"
alias gas="ga && gs"
alias gmm="git merge master"
alias grm="git rebase master"
alias pp="ps axuf | pager"
alias GD='git diff HEAD~1 HEAD'
alias gr='git review'
alias gunmod='git status | grep "modified" | awk "{print \$2}" | xargs -I{} git checkout -- {}'
alias myip="ifconfig | grep 'inet ' | grep -v 127.0.0.1 | cut -d\   -f2"
alias d= "dig "
alias ff="find . -iname "
alias pk='pkill -9 '
alias bashrc="atom /private/etc/bashrc"
alias zshrc="atom ~/.zshrc"
alias hosts="atom /private/etc/hosts"
alias mvnsettings="atom ~/.m2/settings.xml"
alias bi="brew install "
alias bui="brew uninstall "
alias bs="brew search "
alias bd="brew doctor "
alias bu="brew upgrade "
alias bser="brew services"
alias bserls="brew services list"
alias bsersrt="brew services start "
alias bserstp="brew services stop "
## get rid of command not found ##
alias cd..='cd ..'

## a quick way to get out of current directory ##
alias ..='cd ..'
alias ...='cd ../../../'
alias ....='cd ../../../../'
alias .....='cd ../../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../..'

## Colorize the grep command output for ease of use (good for log files)##
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

alias mkdir='mkdir -pv'

alias path='echo -e ${PATH//:/\\n}'
alias now='date +"%T"'
alias nowtime=now
alias nowdate='date +"%d-%m-%Y"'

# Stop after sending count ECHO_REQUEST packets #
alias ping='ping -c 5'
# Do not wait interval 1 second, go fast #
alias fastping='ping -c 100 -s.2'

alias ports='netstat -tulanp'

# do not delete / or prompt if deleting more than 3 files at a time #
alias rm='rm -I --preserve-root'

# confirmation #
alias mv='mv -i'
alias cp='cp -i'
alias ln='ln -i'

# Parenting changing perms on / #
alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'


alias dcu="docker-compose up -d"
alias dcs="docker-compose stop"
alias dcr="docker-compose restart"
alias dcp="docker-compose ps"
alias dbuild="docker build . -t "
alias dexec="docker exec -it "
alias dimgrm="docker image rm "
alias dimgls="docker image ls -a"
alias dcntls="docker container ls "
alias dcntst="docker container stop "
alias dcnts="docker container start "
alias dcnts="docker container rm -flv "
alias dpush="docker push "
alias dpull="docker pull "

# docker alias
alias dclean="docker ps -aq | xargs docker rm -f"
alias dcleani="docker images -q | xargs docker rmi -f"

alias gradleJava="gradle init --type java-application"


###
alias gl="git log -n 15 --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"

#copy present working directory
alias cpwd='pwd | pbcopy'

# FileSearch
function f() { find . -iname "*$1*" ${@:2} }
function r() { grep "$1" ${@:2} -R . }

#mkdir and cd
function mkcd() { mkdir -p "$@" && cd "$_"; }

# Search process by name and highlight !
function psgrep() { ps axuf | grep -v grep | grep "$@" -i --color=auto; }

# Search for files and page it
function search() { find . -iname "*$@*" | less; }

# a visual recursive list of all files and directories
function tree()
{
  find . | sed -e 's/[^\/]*\//|--/g' -e 's/-- |/    |/g' | $PAGER
}

# recursive text search (ack is also nifty)
function ftext()
{
  find . -name '*' | xargs grep -l $1
}

# recursive search and replace (ignoring hidden files and dirs), example: replace foo bar
function replace()
{
  find . \( ! -regex '.*/\..*' \) -type f | xargs perl -pi -e "s/$1/$2/g"
}

extract_archive () {
    local old_dirs current_dirs lower
    lower=${(L)1}
    old_dirs=( *(N/) )
    if [[ $lower == *.tar.gz || $lower == *.tgz ]]; then
        tar zxfv $1
    elif [[ $lower == *.gz ]]; then
        gunzip $1
    elif [[ $lower == *.tar.bz2 || $lower == *.tbz ]]; then
        bunzip2 -c $1 | tar xfv -
    elif [[ $lower == *.bz2 ]]; then
        bunzip2 $1
    elif [[ $lower == *.zip ]]; then
        unzip $1
    elif [[ $lower == *.rar ]]; then
        unrar e $1
    elif [[ $lower == *.tar ]]; then
        tar xfv $1
    elif [[ $lower == *.lha ]]; then
        lha e $1
    else
        print "Unknown archive type: $1"
        return 1
    fi
    # Change in to the newly created directory, and
    # list the directory contents, if there is one.
    current_dirs=( *(N/) )
    for i in {1..${#current_dirs}}; do
        if [[ $current_dirs[$i] != $old_dirs[$i] ]]; then
            cd $current_dirs[$i]
            ls
            break
        fi
    done
}




alias ex=extract_archive
compdef '_files -g "*.gz *.tgz *.bz2 *.tbz *.zip *.rar *.tar *.lha"' extract_archive


##smart sudo...
smart_sudo () {
    if [[ -n $1 ]]; then
        #test if the first parameter is a alias
        if [[ -n $aliases[$1] ]]; then
            #if so, substitute the real command
            sudo ${=aliases[$1]} $argv[2,-1]
        else
            #else just run sudo as is
            sudo $argv
        fi
    else
        #if no parameters were given, then assume we want a root shell
        sudo -s
    fi
}

alias s=smart_sudo
compdef _sudo smart_sudo

function sopen(){
    code "$(rg --files | fzf)"
}

function ks(){
### SERVER
# mnemonic: [K]ill [S]erver
# show output of "lsof -Pwni tcp", use [tab] to select one or multiple entries
# press [enter] to kill selected processes and go back to the process list.
# or press [escape] to go back to the process list. Press [escape] twice to exit completely.

local pid=$(lsof -Pwni tcp | sed 1d | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[kill:tcp]'" | awk '{print $2}')

if [ "x$pid" != "x" ]
then
  echo $pid | xargs kill -${1:-9}
  ks
fi
}

function bup(){
### BREW + FZF
# uninstall multiple packages at once, async
# mnemonic [B]rew [C]lean [P]lugin (e.g. uninstall)

local upd=$(brew leaves | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[brew:update]'")

if [[ $upd ]]; then
  for prog in $(echo $upd)
  do brew upgrade $prog
  done
fi
}

function bip(){
    ### BREW + FZF
# update multiple packages at once
# mnemonic [B]rew [U]pdate [P]lugin

local inst=$(brew search | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[brew:install]'")

if [[ $inst ]]; then
  for prog in $(echo $inst)
  do brew install $prog
  done
fi
}

function bcp(){

### BREW + FZF
# mnemonic [B]rew [I]nstall [P]lugin

local uninst=$(brew leaves | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[brew:clean]'")

if [[ $uninst ]]; then
  for prog in $(echo $uninst)
  do brew uninstall $prog
  done
fi
}

function kp(){
### PROCESS
# mnemonic: [K]ill [P]rocess
# show output of "ps -ef", use [tab] to select one or multiple entries
# press [enter] to kill selected processes and go back to the process list.
# or press [escape] to go back to the process list. Press [escape] twice to exit completely.

local pid=$(ps -ef | sed 1d | eval "fzf ${FZF_DEFAULT_OPTS} -m --header='[kill:process]'" | awk '{print $2}')

if [ "x$pid" != "x" ]
then
  echo $pid | xargs kill -${1:-9}
  kp
fi
}



